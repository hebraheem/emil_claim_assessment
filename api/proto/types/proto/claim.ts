// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: proto/claim.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "claims";

export interface Empty {
}

export interface ClaimConfigResponseDto {
  message: string;
  success: boolean;
  /** HTTP status code */
  status: number;
  data: Steps[];
}

export interface ClaimConfigUpdateRequestDto {
  /** List of steps in the claim configuration */
  request: Steps[];
}

export interface Steps {
  title: string;
  description: string;
  configs: { [key: string]: ClaimConfigConfigDto };
}

export interface Steps_ConfigsEntry {
  key: string;
  value: ClaimConfigConfigDto | undefined;
}

export interface ClaimConfigConfigDto {
  key: string;
  label: string;
  /** e.g., text, number, select, checkbox, radio, textarea, multiselect */
  type: string;
  options: FieldOption[];
  placeholder?: string | undefined;
  required?:
    | boolean
    | undefined;
  /** e.g., regex for validation */
  validation?:
    | string
    | undefined;
  /** Default value for the field */
  defaultValue?:
    | string
    | undefined;
  /** Order of the field in the form */
  orderingNumber?: number | undefined;
}

export interface FieldOption {
  /** The actual value of the option */
  value: string;
  /** The display label for the option */
  label: string;
}

export const CLAIMS_PACKAGE_NAME = "claims";

function createBaseEmpty(): Empty {
  return {};
}

export const Empty: MessageFns<Empty> = {
  encode(_: Empty, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Empty {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmpty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseClaimConfigResponseDto(): ClaimConfigResponseDto {
  return { message: "", success: false, status: 0, data: [] };
}

export const ClaimConfigResponseDto: MessageFns<ClaimConfigResponseDto> = {
  encode(message: ClaimConfigResponseDto, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    if (message.success !== false) {
      writer.uint32(16).bool(message.success);
    }
    if (message.status !== 0) {
      writer.uint32(24).int32(message.status);
    }
    for (const v of message.data) {
      Steps.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClaimConfigResponseDto {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClaimConfigResponseDto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.status = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.data.push(Steps.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseClaimConfigUpdateRequestDto(): ClaimConfigUpdateRequestDto {
  return { request: [] };
}

export const ClaimConfigUpdateRequestDto: MessageFns<ClaimConfigUpdateRequestDto> = {
  encode(message: ClaimConfigUpdateRequestDto, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.request) {
      Steps.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClaimConfigUpdateRequestDto {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClaimConfigUpdateRequestDto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.request.push(Steps.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseSteps(): Steps {
  return { title: "", description: "", configs: {} };
}

export const Steps: MessageFns<Steps> = {
  encode(message: Steps, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    Object.entries(message.configs).forEach(([key, value]) => {
      Steps_ConfigsEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Steps {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSteps();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          const entry3 = Steps_ConfigsEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.configs[entry3.key] = entry3.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseSteps_ConfigsEntry(): Steps_ConfigsEntry {
  return { key: "", value: undefined };
}

export const Steps_ConfigsEntry: MessageFns<Steps_ConfigsEntry> = {
  encode(message: Steps_ConfigsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      ClaimConfigConfigDto.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Steps_ConfigsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSteps_ConfigsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = ClaimConfigConfigDto.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseClaimConfigConfigDto(): ClaimConfigConfigDto {
  return { key: "", label: "", type: "", options: [] };
}

export const ClaimConfigConfigDto: MessageFns<ClaimConfigConfigDto> = {
  encode(message: ClaimConfigConfigDto, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.label !== "") {
      writer.uint32(18).string(message.label);
    }
    if (message.type !== "") {
      writer.uint32(26).string(message.type);
    }
    for (const v of message.options) {
      FieldOption.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.placeholder !== undefined) {
      writer.uint32(42).string(message.placeholder);
    }
    if (message.required !== undefined) {
      writer.uint32(48).bool(message.required);
    }
    if (message.validation !== undefined) {
      writer.uint32(58).string(message.validation);
    }
    if (message.defaultValue !== undefined) {
      writer.uint32(66).string(message.defaultValue);
    }
    if (message.orderingNumber !== undefined) {
      writer.uint32(72).int32(message.orderingNumber);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClaimConfigConfigDto {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClaimConfigConfigDto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.label = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.options.push(FieldOption.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.placeholder = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.required = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.validation = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.defaultValue = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.orderingNumber = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseFieldOption(): FieldOption {
  return { value: "", label: "" };
}

export const FieldOption: MessageFns<FieldOption> = {
  encode(message: FieldOption, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== "") {
      writer.uint32(10).string(message.value);
    }
    if (message.label !== "") {
      writer.uint32(18).string(message.label);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FieldOption {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFieldOption();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.value = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.label = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface ClaimConfigServiceClient {
  getClaimConfig(request: Empty): Observable<ClaimConfigResponseDto>;

  updateClaimConfig(request: ClaimConfigUpdateRequestDto): Observable<ClaimConfigResponseDto>;
}

export interface ClaimConfigServiceController {
  getClaimConfig(
    request: Empty,
  ): Promise<ClaimConfigResponseDto> | Observable<ClaimConfigResponseDto> | ClaimConfigResponseDto;

  updateClaimConfig(
    request: ClaimConfigUpdateRequestDto,
  ): Promise<ClaimConfigResponseDto> | Observable<ClaimConfigResponseDto> | ClaimConfigResponseDto;
}

export function ClaimConfigServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getClaimConfig", "updateClaimConfig"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ClaimConfigService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ClaimConfigService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CLAIM_CONFIG_SERVICE_NAME = "ClaimConfigService";

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
